import os
import time
import random

personagem = {}
inimigo = {}
conseguencia = False

# Armas das classes dos personagens
ArmasGuerreiro = {
    "Berserk": {
        "Nome": "Berserk Sword",
        "Raridade": 2,
        "Dano": 8,
    },
    "Katana": {
        "Nome": "Katana de a√ßo",
        "Raridade": 3,
        "Dano": 13,
    },
    "Moonlight": {
        "Nome": "Lamina da Lua",
        "Raridade": 5,
        "Dano": 20,
    },
    "Rapieira": {
        "Nome": "Rapieira",
        "Raridade": 4,
        "Dano": 19,
    },
    "Espada normal": {
        "Nome": "Espada de ferro",    
        "Raridade": 3,
        "Dano": 11,
    },
    "Adaga": {
        "Nome": "Adagas de ferro",
        "Raridade": 1,
        "Dano": 2,
    },
    "Machado": {
        "Nome": "Machado de guerra",
        "Raridade": 4,
        "Dano": 17,
    },
    "Lan√ßa": {
        "Nome": "Lan√ßa de batalha",
        "Raridade": 2,
        "Dano": 6,
    },
    "Espada longa": {
        "Nome": "Espada longa",
        "Raridade": 4,
        "Dano": 15,
    },
}

ArmasMago = {
    "Cajado da Terra": {
        "Nome": "Cajado da Terra",
        "Raridade": 4,
        "Dano": 17,
    },
    "Cajado do Raio das Sombras": {
        "Nome": "Cajado do Raio das Sombras",
        "Raridade": 2,
        "Dano": 7,
    },
    "Cajado do estranho": {
        "Nome": "Cajado do estranho",
        "Raridade": 3,
        "Dano": 14,
    },
    "Cajado de Gelo": {
        "Nome": "Cajado de Gelo",
        "Raridade": 1,
        "Dano": 3,
    },
    "Cajado Venenoso": {
        "Nome": "Cajado Venenoso",
        "Raridade": 3,
        "Dano": 10,
    },
    "Vara de gelo": {
        "Nome": "Vara de gelo",
        "Raridade": 2,
        "Dano": 5,
    },
    "Adaga m√°gica": {
        "Nome": "Adaga m√°gica",
        "Raridade": 3,
        "Dano": 12,
    },
    "Cabe√ßa de Medusa": {
        "Nome": "Cabe√ßa de Medusa",
        "Raridade": 2,
        "Dano": 9,
    },
    "√öltimo Prisma": {
        "Nome": "√öltimo Prisma",
        "Raridade": 5,
        "Dano": 20,
    },
}

ArmasArqueiro = {
    "Arco basico": {
        "Nome": "Arco basico",
        "Raridade": 2,
        "Dano": 6,
    },
    "Crossbow": {
        "Nome": "Crossbow",
        "Raridade": 3,
        "Dano": 13,
    },
    "Crossbow Automatica": {
        "Nome": "Crossbow Automatica",
        "Raridade": 4,
        "Dano": 15,
    },
    "Arco de Madeira": {
        "Nome": "Arco de Madeira",
        "Raridade": 1,
        "Dano": 4,
    },
    "Arco Artemis": {
        "Nome": "Artemis",
        "Raridade": 3,
        "Dano": 11,
    },
    "Arco Lunar": {
        "Nome": "Arco lunar",
        "Raridade": 4,
        "Dano": 18,
    },
    "Arco de Ferro": {
        "Nome": "Arco de Ferro",
        "Raridade": 1,
        "Dano": 2,
    },
    "Arco Longo": {
        "Nome": "Arco Longo",
        "Raridade": 4,
        "Dano": 15,
    },
    "Arco Ex√≥tico": {
        "Nome": "Arco Ex√≥tico",
        "Raridade": 5,
        "Dano": 20,
    }
}

ArmasInvocador = {
    "Chicote de Couro": {
        "Nome": "Chicote de Couro",
        "Raridade": 2,
        "Dano": 8,
    },
    "Chicotespinho": {
        "Nome": "Chicotespinho",
        "Raridade": 1,
        "Dano": 1,
    },
    "Pun√ß√£o Lombar": {
        "Nome": "Pun√ß√£o Lombar",
        "Raridade": 2,
        "Dano": 7,
    },
    "Estalinho": {
        "Nome": "Estalinho",
        "Raridade": 3,
        "Dano": 14,
    },
    "Chicote Gelado": {
        "Nome": "Chicote Gelado",
        "Raridade": 2,
        "Dano": 5,
    },
    "Durindana": {
        "Nome": "Durindana",
        "Raridade": 3,
        "Dano": 12,
    },
    "Colheita Maldita": {
        "Nome": "Colheita Maldita",
        "Raridade": 1,
        "Dano": 3,
    },   
    "Mangual": {
        "Nome": "Mangual",
        "Raridade": 4,
        "Dano": 17,
    },   
    "Caleidosc√≥pio": {
        "Nome": "Caleidosc√≥pio",
        "Raridade": 5,
        "Dano": 20,
    },   
}

# Monstros
monstros = {
    "Goblin": {
        "Classe": "Goblin",
        "Nome": "üßåÔæ†Ôæ†Goblin",
        "Sexo": "Masculino",
        "Vida": 25,
        "VidaInicial": 25,
        "Dano": 6,
        "Sorte": 4,
    },
    "Esqueleto": {
        "Classe": "Esqueleto",
        "Nome": "üíÄÔæ†Esqueleto",
        "Sexo": "Masculino",
        "Vida": 25,
        "VidaInicial": 25,
        "Dano": 10,
        "Sorte": 3,
    },
    "Fadas": {
        "Classe": "Fada",
        "Nome": "üßöÔæ†Fada",
        "Sexo": "Femenino",
        "Vida": 20,
        "VidaInicial": 20,
        "Dano": 5,
        "Sorte": 7,
    },
    "Elfos":  {
        "Classe": "Elfo",
        "Nome": "üßùÔæ†Elfo",
        "Sexo": "Masculino",
        "Vida": 30,
        "VidaInicial": 30,
        "Dano": 11,
        "Sorte": 4,
    },
    "Reptiliano": {
        "Classe": "Reptiliano",
        "Nome": "ü¶éÔæ†Reptiliano",
        "Sexo": "Masculino",
        "Vida": 28,
        "VidaInicial": 28,
        "Dano": 10,
        "Sorte": 3,
    },
    "ArmaduraÔæ†Viva": {
        "Classe": "Fantasma",
        "Nome": "üõ°Ôæ†Ôæ†ArmaduraÔæ†Viva",
        "Sexo": "Masculino",
        "Vida": 50,
        "VidaInicial": 50,
        "Dano": 19,
        "Sorte": 2,
    },
    "AlmaÔæ†Perdida": {
        "Classe": "AlmaÔæ†Perdida",
        "Nome": "üî•Ôæ†AlmaÔæ†Perdida",
        "Sexo": "Masculino",
        "Vida": 25,
        "VidaInicial": 25,
        "Dano": 10,
        "Sorte": 3,
    },
    "Ogro": {
        "Classe": "Ogro",
        "Nome": "üëπÔæ†Ogro",
        "Sexo": "Masculino",
        "Vida": 50,
        "VidaInicial": 50,
        "Dano": 14,
        "Sorte": 3,
    },
    "LoboÔæ†Fantasma": {
        "Classe": "Fantasma",
        "Nome": "üê∫Ôæ†LoboÔæ†Fantasma",
        "Sexo": "Masculino",
        "Vida": 30,
        "VidaInicial": 3,
        "Dano": 8,
        "Sorte": 3,
    },
    "PessoaÔæ†desconhecida": {
        "Classe": "Estranho",
        "Sexo": "Masculino",
        "Nome": "Estranho",
        "Vida": 30,
        "VidaInicial": 30,
        "Dano": 10,
        "Sorte": 8,
    },
    "MoonLord": {
        "Classe": "Boss",
        "Nome": "Moonlord",
        "Sexo": "Masculino",
        "Vida": 200,
        "VidaInicial": 200,
        "Dano": 20,
        "Sorte": 9,
    },
}

# Sistema de itens encontrados
def itens():
    clear()
    global personagem
    print("Ap√≥s derrotar todos os monstros da caverna voc√™ encontrou uma")
   
    if personagem["Identificador"] == "Guerreiro":
        armasRandom = random.choice(list(ArmasGuerreiro.keys()))
        print(f"{ArmasGuerreiro[armasRandom]['Nome']} \n‚öîÔæ†Ôæ†Dano: {ArmasGuerreiro[armasRandom]['Dano']} \n‚ú®Ôæ†Raridade: {ArmasGuerreiro[armasRandom]['Raridade']}")
        print(f"\nSua arma atual: {personagem['Mochila']['ArmasGuerreiro']}\n")
        
        opcao = int(input("Voc√™ deseja coletar o item? \n1- Coletar \n2- N√£o Pegar \nOp√ß√£o: "))

        match opcao:
            case 1:
                personagem['Mochila']['ArmasGuerreiro'] = {armasRandom: ArmasGuerreiro[armasRandom]}
                print(f"{personagem['Nome']} pegou a {ArmasGuerreiro[armasRandom]} e colocou na mochila...")
            case 2:
                print("Voc√™ deixou o item no ch√£o...")
            case _:
                print("Op√ß√£o Inv√°lida!")
                time.sleep(1)
                itens()
    
    elif personagem["Identificador"] == "Mago":
        armasRandom = random.choice(list(ArmasMago.keys()))
        print(f"{ArmasMago[armasRandom]['Nome']} \n‚öîÔæ†Ôæ†Dano: {ArmasMago[armasRandom]['Dano']} \n‚ú®Ôæ†Raridade: {ArmasMago[armasRandom]['Raridade']} ")
        print(f"\nSua arma atual: {personagem['Mochila']['ArmasMago']}\n")
        
        opcao = int(input("Voc√™ deseja coletar o item? \n1- Coletar \n2- N√£o Pegar \nOp√ß√£o: "))

        match opcao:
            case 1:
                personagem['Mochila']['ArmasMago'] = {armasRandom: ArmasMago[armasRandom]}
                print(f"{personagem['Nome']} pegou a {ArmasMago[armasRandom]} e colocou na mochila...")
            case 2:
                print("Voc√™ deixou o item no ch√£o...")
            case _:
                print("Op√ß√£o Inv√°lida!")
                time.sleep(1)
                itens()

    elif personagem["Identificador"] == "Arqueiro":
        armasRandom = random.choice(list(ArmasArqueiro.keys()))
        print(f"{ArmasArqueiro[armasRandom]['Nome']} \n‚öîÔæ†Ôæ†Dano: {ArmasArqueiro[armasRandom]['Dano']} \n‚ú®Ôæ†Raridade: {ArmasArqueiro[armasRandom]['Raridade']} ")
        print(f"\nSua arma atual: {personagem['Mochila']['ArmasArqueiro']}\n")
        opcao = int(input("Voc√™ deseja coletar o item? \n1- Coletar \n2- N√£o Pegar \nOp√ß√£o: "))

        match opcao:
            case 1:
                personagem['Mochila']['ArmasArqueiro'] = {armasRandom: ArmasArqueiro[armasRandom]}
                print(f"{personagem['Nome']} pegou a {ArmasArqueiro[armasRandom]} e colocou na mochila...")
            case 2:
                print("Voc√™ deixou o item no ch√£o...")
            case _:
                print("Op√ß√£o Inv√°lida!")
                time.sleep(1)
                itens()

    elif personagem["Identificador"] == "Invocador":
        armasRandom = random.choice(list(ArmasInvocador.keys()))
        print(f"{ArmasInvocador[armasRandom]['Nome']} \n‚öîÔæ†Ôæ†Dano: {ArmasInvocador[armasRandom]['Dano']} \n‚ú®Ôæ†Raridade: {ArmasInvocador[armasRandom]['Raridade']}")
        print(f"\nSua arma atual: {personagem['Mochila']['ArmasInvocador']}\n")
        opcao = int(input("Voc√™ deseja coletar o item? \n1- Coletar \n2- N√£o Pegar \nOp√ß√£o: "))

        match opcao:
            case 1:
                personagem['Mochila']['ArmasInvocador'] = {armasRandom: ArmasInvocador[armasRandom]}
                print(f"{personagem['Nome']} pegou a {ArmasInvocador[armasRandom]} e colocou na mochila...")
            case 2:
                print("Voc√™ deixou o item no ch√£o...")
            case _:
                print("Op√ß√£o Inv√°lida!")
                time.sleep(1)
                itens()

# Limpar a tela
def clear():
    if os.name == 'nt': 
        os.system('cls')
    else: 
        os.system('clear')
        
# Sistema de batalha
def batalha():
    global personagem
    global monstros

    while personagem['Atributos']['Vida'] > 0 and monstros[inimigo]['Vida'] > 0:
        opcao = int(input("Deseja: \n1- Atacar \n2- Usar Mochila \n3- Fugir \nOp√ß√£o: "))
        
        match opcao:
            case 1:
                clear()
                
                chance = random.randint(1, 10)
                dano_arma = 0 
                
                if personagem['Identificador'] == 'Guerreiro':
                    if 'ArmasGuerreiro' in personagem['Mochila'] and personagem['Mochila']['ArmasGuerreiro']:
                        arma = random.choice(list(personagem['Mochila']['ArmasGuerreiro'].values()))
                        if 'Dano' in arma:
                            dano_arma = arma['Dano']
                elif personagem['Identificador'] == 'Mago':
                    if 'ArmasMago' in personagem['Mochila'] and personagem['Mochila']['ArmasMago']:  
                        arma = random.choice(list(personagem['Mochila']['ArmasMago'].values()))
                        if 'Dano' in arma:
                            dano_arma = arma['Dano']
                elif personagem['Identificador'] == 'Arqueiro':
                    if 'ArmasArqueiro' in personagem['Mochila'] and personagem['Mochila']['ArmasArqueiro']:
                        arma = random.choice(list(personagem['Mochila']['ArmasArqueiro'].values()))
                        if 'Dano' in arma:
                            dano_arma = arma['Dano']
                elif personagem['Identificador'] == 'Invocador':
                    if 'ArmasInvocador' in personagem['Mochila'] and personagem['Mochila']['ArmasInvocador']:
                        arma = random.choice(list(personagem['Mochila']['ArmasInvocador'].values()))
                        if 'Dano' in arma:
                            dano_arma = arma['Dano']
                
                dano_total = personagem['Atributos']['Dano'] + dano_arma
                monstros[inimigo]['Vida'] -= dano_total
                
                print(f"Voc√™ deu -{dano_total} de dano")
                print(f"{monstros[inimigo]['Nome']} \n‚ù§Ôæ†Ôæ†Vida: {monstros[inimigo]['Vida']} \n‚öîÔæ†Ôæ†Dano: {monstros[inimigo]['Dano']}\n")
                
                if monstros[inimigo]['Vida'] <= 0:
                    recompensa()
                    break
                else:
                    print(f"\nTurno de {monstros[inimigo]['Classe']}")
                    
                    if monstros[inimigo]['Sorte'] >= chance:
                        personagem['Atributos']['Vida'] -= monstros[inimigo]['Dano']
                        print(f"{monstros[inimigo]['Classe']} deu -{monstros[inimigo]['Dano']} de dano")
                        print(f"{personagem['Classe']} \n‚ù§Ôæ†Ôæ†{personagem['Atributos']['Vida']} \n‚öîÔæ†Ôæ†Dano: {personagem['Atributos']['Dano']}\n")
                        
                        if personagem['Atributos']['Vida'] <= 0:
                            playerMorto()
                            break
                    else:
                        print(f"{monstros[inimigo]['Classe']} errou o ataque\n")
            case 2:
                clear()
                chance = random.randint(1, 3)

                print(f"Cura: \nQuantidade: {personagem['Mochila']['Cura']['Quantidade']} \nPorcentagem: {personagem['Mochila']['Cura']['Porcentagem']}\n")
                print(f"Dano: \nQuantidade: {personagem['Mochila']['Dano']['Quantidade']} \nPorcentagem: {personagem['Mochila']['Dano']['Porcentagem']}\n")
                print(f"Sorte: \nQuantidade: {personagem['Mochila']['Sorte']['Quantidade']} \nPorcentagem: {personagem['Mochila']['Sorte']['Porcentagem']}\n")
                
                print("Digite o nome do item que deseja usar")
                print("Digite sair caso queira voltar pra batalha")
                opcao = str(input("Deseja usar algum item? \nOp√ß√£o: ")).capitalize()
                clear()
                if opcao in personagem['Mochila']:
                    if personagem['Mochila'][opcao]['Quantidade'] == 0:
                        print("Voc√™ n√£o tem mais desse item")
                    else:
                        if personagem['Mochila'][opcao] == personagem['Mochila']['Cura']:
                            if personagem['Atributos']['Vida'] <= personagem['VidaInicial']:
                                personagem['Atributos']['Vida'] += personagem['Mochila']['Cura']['Porcentagem']
                                personagem['Mochila'][opcao]['Quantidade'] -= 1
                                if personagem['Atributos']['Vida'] > personagem['VidaInicial']:
                                    personagem['Atributos']['Vida'] = personagem['VidaInicial']
                                    print(f"Vida: {personagem['Atributos']['Vida']}")
                                else: 
                                    print(f"Vida: {personagem['Atributos']['Vida']}")
                                    
                        elif personagem['Mochila'][opcao] == personagem['Mochila']['Dano']:
                            personagem['Atributos']['Dano'] += personagem['Mochila']['Dano']['Porcentagem']
                            personagem['Mochila'][opcao]['Quantidade'] -= 1
                            print(f"Voc√™ aumento seu dano para mais: {personagem['Mochila']['Dano']['Porcentagem']}")
                            print(f"Dano: {personagem['Atributos']['Dano']}")
                            
                        elif personagem['Mochila'][opcao] == personagem['Mochila']['Sorte']:
                            personagem['Atributos']['Sorte'] += personagem['Mochila']['Sorte']['Porcentagem']
                            personagem['Mochila'][opcao]['Quantidade'] -= 1
                            print(f"Voc√™ aumento seu sorte para mais: {personagem['Mochila']['Sorte']['Porcentagem']}")
                            print(f"Sorte: {personagem['Atributos']['Sorte']}")
                        else:
                            pass
                elif opcao.capitalize() == "Sair":
                    clear()
                    batalha()
                else:
                    print("Item n√£o encontrado")
            case 3:
                fugir = random.randint(1, 7)
                if 2 >= fugir:
                    print("Voc√™ conseguiu fugir da batalha!")
                    time.sleep(1)
                    clear()
                    exploracao()
                else:
                    chance = random.randint(1, 10)
                    print("Voc√™ n√£o conseguiu fugir")
                    
                    print(f"\nTurno de {monstros[inimigo]['Classe']}")
                        
                    if monstros[inimigo]['Sorte'] >= chance:
                        personagem['Atributos']['Vida'] -= monstros[inimigo]['Dano']
                        print(f"Voc√™ est√° com {personagem['Atributos']['Vida']} de vida")
                        
                        if personagem['Atributos']['Vida'] <= 0:
                            playerMorto()
                            break
                    else:
                        print(f"{monstros[inimigo]['Classe']} errou o ataque")
            case _:
                print("Op√ß√£o Inv√°lida!")
                time.sleep(1)
                clear()
     
# Morte do player 
def playerMorto():
    global personagem
    global monstros
    global inimigo
    
    clear()
    
    print(f"Voc√™ morreu para {'um' if monstros[inimigo]['Sexo'] == "Masculino" else 'uma'} {monstros[inimigo]['Nome']}!")
    print(f"Inimigos Mortos: {personagem['Kills']}")
    print(f"Cavernas Exploradas: {personagem['CavernaExplorada']}")
    time.sleep(2)
    print("Deseja reniciar?")
    opcao = int(input("1- Sim \n2- N√£o \nOp√ß√£o: "))
    match opcao:
        case 1:
            clear()
            novoJogo()
        case 2:
            clear()
            iniciarJogo()
        case _:
            print("Op√ß√£o Inv√°lida!")
            time.sleep(1)
            clear()
            playerMorto()

# Recompensa por matar um mostro
def recompensa(): 
    global personagem
    global monstros
    global inimigo
    
    ganhoMoeda = random.randint(1, 10)
    
    personagem['Kills'] += 1
    personagem['Moeda'] += ganhoMoeda
    
    monstros[inimigo]['Vida'] = monstros[inimigo]['VidaInicial']
    
    print(f"Voc√™ derrotou {'um' if monstros[inimigo]['Sexo'] == "Masculino" else 'uma'} {monstros[inimigo]['Classe']} \nRecompensas: \nüí∞Ôæ†R$: {ganhoMoeda} \n‚ò†Ô∏èÔæ†Ôæ†Kills: {personagem['Kills']}")
    time.sleep(2)
    clear()
      
# Sess√£o do jogador
def iniciarJogo():
    clear()
    
    print("\033[1mCiviliza√ß√£o Zero\033[0m")
    opcao = int(input("\n1- Novo jogo \n2- Instru√ß√µes \n3- Sair \nOp√ß√£o: "))
    
    match opcao:
        case 1:
            return novoJogo()
        case 2:
            return instrucoes()
        case 3:
            return
        case _:
            print("Op√ß√£o Invalida!")
            time.sleep(1) 
            iniciarJogo()
  
# Instru√ß√µes de como que joga      
def instrucoes():
    clear()
    
    print("\033[1m----------Instru√ß√µes----------\033[0m")
    print("Os comandos do jogo s√£o simples!")
    print("Digite um \033[1mnumero\033[0m da op√ß√£o no terminal para continuar o jogo")
    print("Digite o \033[1mnome\033[0m da opc√ßao na mochila")
    print("O jogo ser√° baseado em \033[1mturnos\033[0m, durante um turno, voc√™ atacar√° e no outro seu inimigo atacar√°")
    print("Seu objetivo √© explorar \033[1mcavernas\033[0m e \033[1mderrotar 25 inimigos\033[0m para encontrar a \033[1mcaverna final\033[0m, onde voc√™ encontrara seu \033[1mfinal\033[0m")
    print("Cada classe vir√° com n√≠veis de atributos \033[1mdiferentes\033[0m")
   
    opcao = int(input("\n1- Sair \nOp√ß√£o: "))
    
    match opcao:
        case 1:
            return iniciarJogo()
        case _:
            print("Op√ß√£o Invalida!")
            time.sleep(1) 
            instrucoes()
    
# Partida pra ver os persomagens               
def novoJogo():
    global personagem
    
    clear()
    print("Em um tempo j√° quase esquecido, a humanidade conseguira alcan√ßar um nivel tecnologico o suficiente")
    print("para se sustentar e popular outros planetas e sua Lua...")
    time.sleep(4)
    print("Os reinos da terra e da lua criados pela tecnologia humana prosperavam, e cada dia mais avan√ßavam para seu objetivo.")
    print("Mas as coisas nao sairam como o esperado, cientistas encontraram algo que poderia destruir a humanidade escondido")
    print("dentro da Lua...")
    time.sleep(5)
    print("Algo que fez com que os cientistas enlouquecessem...")
    time.sleep
    print("Mas por pura ganancia, o Lorde que comandava a civiliza√ß√£o da Lua continuou as pesquisas com o que haviam encontrado")
    time.sleep(5)
    print("A Lua se rompeu...")
    time.sleep(5)
    print("O rei ganancioso enlouqueceu e obrigou que criassem uma arma contra a civiliza√ß√£o da terra")
    print("Armas essas que levariam monstros para terra, cavernas criadas para destruir e preparar a terra para a sua chegada ")
    print("durante um tempo n√£o mais descrito nos livros de historia, a humaninade lutou incansavelmente contra a for√ßa do Lorde")
    time.sleep(5)
    print("a guerra fez com que a terra mudasse com a exposi√ß√£o da ''coisa'' encontrada na lua.")
    print("O mundo mudou, os humanos se adaptaram")
    time.sleep(5)
    print("Bem-vindo a \033[1mCiviliza√ß√£o Zero\033[0m!") 
    print("Encare novos desafios!!\n")
    print("D√™ \033[1mvida\033[0m ao seu her√≥i ")
    nome = str(input("Digite o \033[1mnome\033[0m do seu her√≥i: "))
    idade = int(input("Digite a \033[1midade\033[0m do seu her√≥i: "))
    
    print("\nEscolha uma \033[1mclasse\033[0m:")
    
    opcao = int(input("1- ‚öîÔæ†Ôæ†Guerreiro \n2- üßôÔæ†Mago \n3- üèπÔæ†Arqueiro \n4- üêâÔæ†Invocador \n5- Voltar \nOp√ß√£o: "))
    
    match opcao:
        case 1: 
            clear()
            personagem = {
                "Nome": nome,
                "Idade": idade,
                "Classe": "‚öîÔæ†Ôæ†Guerreiro",
                "Identificador": "Guerreiro",
                "Kills": 0,
                "CavernaExplorada": 0,
                "Estamina": 60,
                "Moeda": 0, 
                "VidaInicial": 120,
                "EstaminaInicial": 60,
                "Atributos": {
                    "Vida": 120,
                    "Dano": 8,
                    "Sorte": 4,
                },
                "Mochila": {
                    'ArmasGuerreiro': {
                    },
                    "Cura": {
                        "Quantidade": 3,
                        "Porcentagem": 25,
                    },
                    "Dano": {
                        "Quantidade": 1,
                        "Porcentagem": 1
                    },
                    "Sorte": {
                        "Quantidade": 0,
                        "Porcentagem": 1
                    },
                },
                "Habilidades": ["Ataque Brutal", "Escudo de Ferro"]
            }
            escolhaPersonagem()
        
        case 2:
            clear()
            personagem = {
                "Nome": nome,
                "Idade": idade,
                "Classe": "üßôÔæ†Mago",
                "Identificador": "Mago",
                "Kills": 0,
                "CavernaExplorada": 0,
                "Estamina": 40,
                "Moeda": 0, 
                "VidaInicial": 80,
                "EstaminaInicial": 40,
                "Atributos": {
                    "Vida": 80,
                    "Dano": 7,
                    "Sorte": 4,
                },
                "Mochila": {
                    "ArmasMago": {
                        
                    },
                    "Cura": {
                        "Quantidade": 2,
                        "Porcentagem": 25,
                    },
                    "Dano": {
                        "Quantidade": 4,
                        "Porcentagem": 1
                    },
                    "Sorte": {
                        "Quantidade": 1,
                        "Porcentagem": 1
                    },    
                },
                "Habilidades": ["Bola de Fogo", "Rel√¢mpago em Cadeia"]
            }
            escolhaPersonagem()
            
        case 3:
            clear()
            personagem = {
                "Nome": nome,
                "Idade": idade,
                "Classe": "üèπÔæ†Arqueiro",
                "Identificador": "Arqueiro",
                "Kills": 0,
                "CavernaExplorada": 0,
                "Estamina": 50,
                "Moeda": 0, 
                "VidaInicial": 100,
                "EstaminaInicial": 50,
                "Atributos": {
                    "Vida": 100,
                    "Dano": 6,
                    "Sorte": 8,
                },
                "Mochila": {           
                    'ArmasArqueiro': {
                    },
                  "Cura": {
                        "Quantidade": 3,
                        "Porcentagem": 25,
                    },
                    "Dano": {
                        "Quantidade": 2,
                        "Porcentagem": 1
                    },
                    "Sorte": {
                        "Quantidade": 1,
                        "Porcentagem": 1
                    },    
                },
                "Habilidades": ["Tiro Preciso", "Camuflagem"]
            }
            escolhaPersonagem()
        
        case 4:
            clear()
            personagem = {
                "Nome": nome,
                "Idade": idade,
                "Classe": "üêâÔæ†Invocador",
                "Identificador": "Invocador",
                "Kills": 0,
                "CavernaExplorada": 0,
                "Estamina": 50,
                "Moeda": 0, 
                "VidaInicial": 100,
                "EstaminaInicial": 50,
                "Atributos": {
                    "Vida": 100,
                    "Dano": 9,
                    "Sorte": 5,
                },
                "Mochila": {           
                    'ArmasInvocador': {
                    },
                  "Cura": {
                        "Quantidade": 3,
                        "Porcentagem": 25,
                    },
                    "Dano": {
                        "Quantidade": 2,
                        "Porcentagem": 1
                    },
                    "Sorte": {
                        "Quantidade": 1,
                        "Porcentagem": 1
                    },    
                },
                "Habilidades": ["Tiro Preciso", "Camuflagem"]
            }
            escolhaPersonagem()
            
        case 5:
            iniciarJogo() 
        case _:
            print("Op√ß√£o Inv√°lida!")
            time.sleep(1) 
            clear()
            novoJogo()

# Escolha de personagem     
def escolhaPersonagem():
    global personagem
    
    print(f"\nVoc√™ escolheu a classe: {personagem['Classe']}")
    print(f"Atributos: \n‚ù§Ôæ†Ôæ†Vida: {personagem['Atributos']['Vida']} \n‚öîÔæ†Ôæ†Dano: {personagem['Atributos']['Dano']} \nüçÄÔæ†Sorte: {personagem['Atributos']['Sorte']}")
    print(f"Habilidades: {personagem['Habilidades']}")
    opcao = int(input("\nVoc√™ tem certeza? \n1- Sim \n2- Voltar \nOp√ß√£o: "))
    match opcao:
        case 1:
            tutorial()
        case 2:
            novoJogo()
        case _:
            print("Op√ß√£o Inv√°lida!")
            time.sleep(1) 
            clear()
            escolhaPersonagem()

# Tutorial do primeiro monstro
def tutorial():
    global personagem
    global monstros
    global inimigo
    global conseguencia
    
    clear()
    print(f"{personagem['Nome']} sai em sua primeira jornada para se tornar um grande her√≥i")
    print("e derrotar as cavernas para livrar seu planeta dos monstros!")
    print(f"Durante sua caminhada, {personagem['Nome']} escuta \033[1mgritos dentro da floresta\033[0m")
    time.sleep(1) 
    
    opcao = int(input("Voc√™ deseja: \n1- Investigar \n2- Ir embora \nOp√ß√£o: "))
    
    match opcao:
        case 1:
            pass
        case 2: 
            print("Voc√™ fugiu, \033[1mconsequ√™ncias\033[0m vir√£o no futuro")
            personagem['Atributos']['Sorte'] -= 2
            conseguencia = True
            time.sleep(1) 
            clear()
            exploracao()
        case _:
            print("Op√ß√£o Inv√°lida!")
            time.sleep(1) 
            clear()
            tutorial()
    
    clear()
    print(f"Voc√™ ve um {monstros['Goblin']['Classe']} atancando pessoas dentro da floresta")
    print("Se prepare pela primeira batalha!")
    inimigo = 'Goblin'
    batalha()
    
    print(f"\nObrigado por salvar nossas vidas, pegue esse Moeda como recompensa")
    ganhoMoeda = random.randint(1, 10)
    personagem['Moeda'] += ganhoMoeda + 2
    print(f"üí∞Ôæ†R$: {personagem['Moeda']}")
    time.sleep(1) 
    exploracao()

# Caminhos
def exploracao():
    global personagem
    global monstros
    global inimigo
    mudarValor = True
    caminhoSalvo = 0
    
    while True:

        if personagem["Estamina"] <= 0:
            print("Voc√™ n√£o consegue andar mais!")
            print("Volte para vila descan√ßar")
            time.sleep(1)
            vila()
       
       # Se n√£o, ele anda
        else:
            clear()
            if mudarValor:
                caminho = random.randint(1, 32)
            else:
                caminho = caminhoSalvo
                mudarValor = True

        # Caminho s√≥ de estrada
        if caminho <= 5:
            print("Qual caminho devo seguir: ")
            opcao = int(input("1- Seguir estrada \nOp√ß√£o: "))   
            match opcao:
                case 1:
                    personagem["Estamina"] -= 2
                    pass
                case _:
                    print("Op√ß√£o Inv√°lida!")
                    caminhoSalvo = caminho
                    mudarValor = False
                    time.sleep(1)

        # Caminho de estrada e vila
        elif caminho > 5 and caminho <= 10:
            print("Qual caminho devo seguir: ")
            opcao = int(input("1- Seguir estrada \n2- Vila \nOp√ß√£o: "))   
            match opcao:
                case 1:
                    personagem["Estamina"] -= 2
                    pass  
                case 2:
                    vila()
                case _:
                    print("Op√ß√£o Inv√°lida!")
                    caminhoSalvo = caminho
                    mudarValor = False
                    time.sleep(1)
        
                # Caminho de estrada e caverna pequena,    
        
        # Caminho de estrada e caverna pequena
        elif caminho > 10 and caminho <= 15:
            print("Qual caminho devo seguir: ")
            opcao = int(input("1- Seguir estrada \n2- Seguir caverna \nOp√ß√£o: "))
            match opcao:
                case 1:
                    personagem["Estamina"] -= 2
                    pass 
                case 2:
                    personagem["Estamina"] -= 2
                    cavernaPequena()
                case _:
                    print("Op√ß√£o Inv√°lida!")
                    caminhoSalvo = caminho
                    mudarValor = False
                    time.sleep(1)
               
        # Caminho de estrada e caverna media,         
        elif caminho > 15 and caminho <= 20:
            print("Qual caminho devo seguir: ")
            opcao = int(input("1- Seguir estrada \n2- Seguir caverna media \nOp√ß√£o: "))
            match opcao:
                case 1:
                    personagem["Estamina"] -= 2
                    pass 
                case 2:
                    personagem["Estamina"] -= 2
                    cavernaMedia()
                case _:
                    print("Op√ß√£o Inv√°lida!")
                    caminhoSalvo = caminho
                    mudarValor = False
                    time.sleep(1)
        
        # Caminho de estrada e caverna grande,
        elif caminho > 20 and caminho <= 25:
            if personagem["CavernaExplorada"] >= 10:
                print("Qual caminho devo seguir: ")
                opcao = int(input("1- Seguir estrada \n2- Seguir \033[1mcaverna misteriosa\033[0m \nOp√ß√£o: "))
                
                match opcao:
                    case 1:
                        personagem["Estamina"] -= 2
                        pass 
                    case 2:
                        personagem["Estamina"] -= 2
                        cavernaGrande()
                    case _:
                        print("Op√ß√£o Inv√°lida!")
                        caminhoSalvo = caminho
                        mudarValor = False
                        time.sleep(1)
            else: 
                print("Qual caminho devo seguir: ")
                opcao = int(input("1- Seguir estrada \nOp√ß√£o: "))   
                match opcao:
                    case 1:
                        personagem["Estamina"] -= 2
                        pass
                    case _:
                        print("Op√ß√£o Inv√°lida!")
                        caminhoSalvo = caminho
                        mudarValor = False
                        time.sleep(1)
        
        # Lugares Abandonados
        elif caminho > 25 and caminho <= 27:
            chance = random.randint(1, 5)
            chanceMoeda = random.randint(1, 8)
            
            if chance == 1:
                print("Voc√™ encontrou uma casa abandonada")
                print("üëúÔæ†Vasculhando..")
                time.sleep(1)
                personagem["Moeda"] += chanceMoeda
                
                print("Itens encontrados:")
                print(f"Moeda: {chanceMoeda}")
                time.sleep(1)
            elif chance == 2:
                print("Voc√™ encontrou uma vila abandonada")
                print("üëúÔæ†Vasculhando..")
                time.sleep(1)
                personagem["Moeda"] += chanceMoeda
                
                print("Itens encontrados:")
                print(f"Moeda: {chanceMoeda}")
                time.sleep(1)
            elif chance == 3:
                print("Voc√™ encontrou uma campo de batalha destruido")
                print("üëúÔæ†Vasculhando..")
                time.sleep(1)
                personagem["Moeda"] += chanceMoeda
                
                print("Itens encontrados:")
                print(f"Moeda: {chanceMoeda}")
                time.sleep(1)
            elif chance == 4:
                print("Voc√™ encontrou uma arvore estranha")
                print("üëúÔæ†Vasculhando..")
                time.sleep(1)
                personagem["Moeda"] += chanceMoeda
                
                print("Itens encontrados:")
                print(f"Moeda: {chanceMoeda}")
                time.sleep(1)
            elif chance == 5:
                print("Voc√™ encontrou uma torre destruida")
                print("üëúÔæ†Vasculhando..")
                time.sleep(1)
                personagem["Moeda"] += chanceMoeda
                
                print("Itens encontrados:")
                print(f"Moeda: {chanceMoeda}")
                time.sleep(1)
        
        # Bolsa no ch√£o    
        elif caminho > 27 and caminho <= 29:
            personagem["Estamina"] -= 2
            bolsa = random.randint(1, 5)
            personagem['Moeda'] += bolsa
            print("Voc√™ encontrou uma sacola no ch√£o!")
            print("üëúÔæ†Vasculhando..")
            time.sleep(1)
           
            print("Itens encontrados:")
            print(f"Moeda: {bolsa}")
            
            time.sleep(1)
        
        # Inimigo no caminho
        elif caminho > 29 and caminho <= 32:
            personagem["Estamina"] -= 2
            inimigo = random.choice([m for m in monstros.keys() if m != "MoonLord"])
            print(f"Voc√™ encontrou {'um' if monstros[inimigo]['Sexo'] == "Masculino" else 'uma'} {monstros[inimigo]['Classe']} no caminho")
            time.sleep(2)
            batalha()

# Caverna pequena                 
def cavernaPequena():
    global monstros
    global inimigo
    chance = random.randint(1, 10)
    clear()
    
    print(f"Durante sua jornada, voc√™ encontra uma pequena caverna escura e silenciosa")
    print("O som de gotas caindo nas pedras ecoa por todo o lugar")
    print("Voc√™ decide que √© um bom lugar para treinar, derrotando monstros e aprimorando suas habilidades...\n")
    
    # Primeira batalha
    inimigo = random.choice([m for m in monstros.keys() if m != "MoonLord"])
    print(f"Voc√™ encontra um {monstros[inimigo]['Nome']} escondido nas sombras da caverna")
    print("O monstro se aproxima com olhos brilhando na escurid√£o, pronto para atacar")
    print(f"Prepare-se para a batalha!")
    time.sleep(1)
    batalha()
    time.sleep(1)
    
    # Segunda batalha
    inimigo2 = random.choice([m for m in monstros.keys() if m != inimigo and m != "MoonLord" and m not in inimigo])
    inimigo = inimigo2
    print(f"Voc√™ sente uma presen√ßa sinistra vindo da caverna")
    print(f"Ao explorar, encontra um {monstros[inimigo]['Nome']}")
    print("O monstro, mais feroz que os anteriores")
    print(f"Prepare-se para a batalha!")
    time.sleep(1)
    batalha()
    time.sleep(1)

    print(f"Parab√©ns, {personagem['Nome']}! Voc√™ derrotou todos os monstros da Caverna!")
    print("A caverna parece estar silenciosa novamente...")
    time.sleep(1)
    
    personagem['CavernaExplorada'] = personagem['CavernaExplorada'] + 1
    if chance >= 7:
        print("Enquanto explora os restos dos monstros derrotados, voc√™ encontra alguns itens valiosos escondidos nas cavernas!")
        time.sleep(2)
        itens()
    else:
        print("Nada de interessante foi encontrado na caverna...")
        pass
    print("Continue explorando para conquistar mais itens e moedas...")

# Caverna media
def cavernaMedia():
    global monstros
    global inimigo
    chance = random.randint(1, 10)
    clear()
    
    print(f"Enquanto caminhava pela floresta em busca de novos desafios, algo chamou sua aten√ß√£o √† dist√¢ncia")
    print("Uma entrada de caverna media, parcialmente escondida por vegeta√ß√£o densa, parecia esconder mist√©rios antigos e perigos desconhecidos")
    time.sleep(3)
    print(f"Voc√™ se aproxima e sem quere cai dentro da caverna")
    print("As paredes cobertas de musgo refletem a pouca luz que entra pela entrada")
    print("No fundo, um som distante de √°gua gotejando ecoa pela caverna")
    time.sleep(3)
    
    # Primeira batalha
    inimigo = random.choice([m for m in monstros.keys() if m != "MoonLord"])
    print(f"De repente, um {monstros[inimigo]['Nome']} surge das sombras")
    print("Sem mais avisos, avan√ßou contra voc√™")
    print(f"Prepare-se para a batalha!")
    time.sleep(1)
    batalha()
    time.sleep(1)
    
    print(f"Ap√≥s derrotar o {monstros[inimigo]['Nome']}, voc√™ decide continuar a explora√ß√£o da caverna")
    print("O ambiente vai ficando cada vez mais escuro, parece como se o lugar estivesse guardando um segredo")
    print("Enquanto caminha, o eco dos seus passos reverbera pelas paredes, criando uma sensa√ß√£o de que a caverna est√° viva e observando")
    time.sleep(2)
    
    # Segunda batalha
    inimigo2 = random.choice([m for m in monstros.keys() if m != inimigo and m != "MoonLord" and m not in inimigo and m not in inimigo])
    inimigo = inimigo2
    print(f"Voc√™ encontra um {monstros[inimigo2]['Nome']}")
    print(f"Ele bloqueia o caminho, e n√£o h√° outra sa√≠da!")
    print(f"Prepare-se para a batalha!")
    time.sleep(1)
    batalha()
    time.sleep(1)
    
    # Terceira batalha
    print("A medida que o caminho vai se estreitando, voc√™ sente uma presen√ßa ainda mais amea√ßadora se aproximando...")
    time.sleep(1)
    inimigo3 = random.choice([m for m in monstros.keys() if m != inimigo and m != "MoonLord" and m not in inimigo and m not in inimigo2])
    inimigo = inimigo3
    print(f"{monstros[inimigo3]['Nome']} aparece em um corredor estreito")
    print("Ele vem em sua dire√ß√£o com velocidade surpreendente!")
    print(f"Prepare-se para a batalha!")
    time.sleep(1)
    batalha()
    time.sleep(1)
    
    print(f"Parab√©ns, {personagem['Nome']}! Voc√™ derrotou todos os monstros da Caverna!")
    print("A caverna parece estar silenciosa novamente...")
    time.sleep(1)
    
    personagem['CavernaExplorada'] = personagem['CavernaExplorada'] + 2
    if chance >= 5:
        print("Enquanto explora os restos dos monstros derrotados, voc√™ encontra alguns itens valiosos escondidos nas cavernas!")
        time.sleep(1)
        itens()
    else:
        print("Nada de interessante foi encontrado na caverna...")
        pass
    print("Continue explorando para conquistar mais itens e moedas...")

# Caverna grande
def cavernaGrande():
    global monstros
    global inimigo
    global conseguencia
    
    clear()
    print("Voc√™ encontrou uma caverna misteriosa durante sua caminhada")
    print("Dela emanava uma forte aura maligna, como se algo muito sombrio estivesse √† espreita")
    time.sleep(2)
    print("Voc√™ hesita por um momento, mas decide entrar. O que poderia ser mais perigoso do que o que j√° enfrentou?")
    print("√Ä medida que adentra a caverna, o ambiente fica mais denso e a luz do exterior come√ßa a desaparecer")
    print("Cada passo ecoa, amplificado pelas paredes de pedra que parecem sussurrar segredos antigos...")
    time.sleep(3)
    
    print("√Ä medida que se aprofunda na caverna, um som suave mas inquietante come√ßa a se manifestar √† dist√¢ncia")
    print("Sombras estranhas dan√ßam pelas paredes, e voc√™ percebe que n√£o est√° sozinho...")
    time.sleep(2)
    
    if conseguencia == True:
        # Primeira batalha - Fadas
        inimigo = "Fadas"
        print(f"Voc√™ encontrou um grupo de duas {monstros[inimigo]['Nome']}! Eles emitem uma luz sobrenatural")
        print("Come√ßam a atacar com feiti√ßos de ilus√£o")
        print(f"Prepare-se para a batalha!")
        batalha()
        batalha()
        time.sleep(1)
        
        # Segunda batalha - Ogros
        inimigo = "Ogro"
        print(f"Ap√≥s derrotar as fadas, voc√™ se depara com um {monstros[inimigo]['Nome']} gigante bloqueando o caminho")
        print("O ogro est√° pronto para esmag√°-lo com sua for√ßa brutal")
        print(f"Prepare-se para a batalha!")
        batalha()
        time.sleep(1)
        
        # Boss final - MoonLord
        inimigo = "MoonLord"
        print(f"Ap√≥s derrotar os inimigos anteriores, {personagem['Nome']} entra em uma sala secreta")
        print("Voc√™ encontra tecnologia alien√≠gena, jamais vista antes")
        print("Voc√™ v√™ imagens de um reino perdido, do caos causado pela gan√¢ncia do Lorde da Lua")
        time.sleep(2)
        print("A hist√≥ria de uma civiliza√ß√£o destru√≠da por sua corrup√ß√£o se desenrola diante de seus olhos...")
        print("Voc√™ agora est√° nos dom√≠nios do MoonLord, ele est√° esperando por voc√™")
        print(f"Voc√™ encontra o Boss {monstros[inimigo]['Nome']}!")
        print("Prepare-se para a batalha final, o destino do mundo est√° em suas m√£os!")
        batalha()
        time.sleep(2)
    else:
        # Segunda batalha - Fadas
        inimigo = "Fadas"
        print(f"Voc√™ encontrou um grupo de duas {monstros[inimigo]['Nome']}! Eles emitem uma luz sobrenatural")
        print("Come√ßam a atacar com feiti√ßos de ilus√£o")
        print(f"Prepare-se para a batalha!")
        batalha()
        batalha()
        time.sleep(1)
        
        # Segunda batalha - Pessoa desconhecida
        inimigo = "PessoaÔæ†desconhecida"
        print(f"Ap√≥s derrotar as fadas, uma figura misteriosa aparece no caminho")
        print(f"Essa {monstros[inimigo]['Nome']} parece n√£o ter inten√ß√µes amig√°veis")
        print(f"Prepare-se para a batalha!")
        batalha()
        time.sleep(1)
        
        # Terceira batalha - Ogros
        inimigo = "Ogro"
        print(f"Voc√™ avan√ßa, mas se depara com outro dois {monstros[inimigo]['Nome']} gigante!")
        print("O ogro parece ainda mais forte, e ele se prepara para esmag√°-lo com um golpe mortal!")
        print(f"Prepare-se para a batalha!")
        batalha()
        batalha()
        time.sleep(1)
 
        # Boss final - MoonLord
        inimigo = "MoonLord"
        print(f"Ap√≥s derrotar os inimigos anteriores, {personagem['Nome']} entra em uma sala secreta")
        print("Voc√™ encontra tecnologia alien√≠gena, jamais vista antes")
        print("Voc√™ v√™ imagens de um reino perdido, do caos causado pela gan√¢ncia do Lorde da Lua")
        time.sleep(2)
        print("A hist√≥ria de uma civiliza√ß√£o destru√≠da por sua corrup√ß√£o se desenrola diante de seus olhos...")
        print("Voc√™ agora est√° nos dom√≠nios do MoonLord, ele est√° esperando por voc√™")
        print(f"Voc√™ encontra o Boss {monstros[inimigo]['Nome']}!")
        print("Prepare-se para a batalha final, o destino do mundo est√° em suas m√£os!")
        batalha()
        time.sleep(2)
    
    print("Parab√©ns, voc√™ derrotou o MoonLord e completou a caverna!")
    time.sleep(2)
    print("Obrigado por acabar o nosso jogo!")
    time.sleep(1)
    print("Mas a guerra n√£o acabou. Outros perigos podem surgir a qualquer momento.")
    time.sleep(3)
    exit()

# Lugar para poder recuperar vida e comprar po√ß√£o
def vila():
    global personagem
    global conseguencia
    
    clear()
    chance = random.randint(1, 10)
    print("Voc√™ chegou a vila")
    print("Voc√™ pode visitar lugares pra recuperar vida e mercadores pra comprar po√ß√µes\n")
    if chance >= 7:
        NPC()
    else:
        opcaoVila()
        
# Op√µes de escolha da vila   
def opcaoVila():
    clear()
    print("Voc√™ chegou em uma vila")
    print("Voc√™ pode visitar lugares pra recuperar vida e mercadores pra comprar po√ß√µes")
    
    opcao = int(input("\n1- Motel \n2- Mercador \n3- Sair \n4- Op√ß√£o: "))
    
    match opcao:
        case 1:
            motel()
        case 2:
            mercador()
        case 3:
            exploracao()
        case _:
            print("Op√ß√£o Inv√°lida!")
            time.sleep(1)
            opcaoVila()   

# NPCS que ir√£o falar uma mensagem
def NPC():
    clear()
    global personagem
    npc = random.randint(1, 25)
    print("Voc√™ chegou a vila")
    print("Voc√™ pode visitar lugares pra recuperar vida e mercadores pra comprar po√ß√µes")
    
    if npc >= 24:
        moeda = random.randint(1, 10)
        print("NPC: Isso √© um assalto!")
        print("NPC: Passe suas moedas ou eu vou te furar todo!")
        personagem["Moeda"] -= moeda
        print(f"Voc√™ perdeu R$: {moeda} moedas")
        print(f"Dinheiro total: {personagem['Moeda']}")
        time.sleep(1)
        opcaoVila()
        

    elif npc >= 1 and npc <= 5:
        quantidade = random.randint(1, 25)
        print("NPC: Ol√° amigo, sou um ca√ßador!")
        print(f"NPC: Traga {quantidade} cabe√ßas de monstros para receber uma quantia em moedas!")
        time.sleep(1)
        opcaoVila()
        
        if personagem["Kills"] >= quantidade:
            moeda = random.randint(1, 10)
            print(f"NPC: Muito bem, tome R$: {moeda} como recompensa")
            personagem["Moeda"] += moeda
            print(f"Dinheiro total: {personagem['Moeda']}")
            time.sleep(1)
            opcaoVila()

    elif npc > 5 and npc  <= 23:
        fala = random.randint(1, 20)

        if fala <= 5:
            print("NPC: Ouvi rumores de uma misteriosa caverna em ruinas que habita um ser maligno")
            print("NPC: dizem por ai que ele √© o motivo do nosso mundo ser assim...")
            time.sleep(1)
            opcaoVila()
        elif fala <= 10:
            print(f"NPC: Ol√°, {personagem['Nome']}! Bem-vindo ha vila")
            time.sleep(1)
            opcaoVila()
        elif fala <= 15:
            print("NPC: Ei, ei, ei...")
            time.sleep(1)
            if conseguencia:
                print("NPC: Sinto uma aura ruim emanando de voc√™...")
                time.sleep(1)
                opcaoVila()
            else:
                print("NPC: Sinto uma aura bondosa emanando de voc√™..")
                time.sleep(1)
                opcaoVila()
        elif fala <= 19:
            print("NPC Mudo: ...")
            time.sleep(1)
            opcaoVila()
        elif fala == 20:
            print("Gato Preto: Miau, Miau, Miau")
            personagem["Atributos"]['Sorte'] += 1
            time.sleep(1)
            opcaoVila()

# Sistema para recuperar vida e estamina
def motel():
    global personagem
    clear()
    
    print("Bem vindo ao motel!")
    print("Gostaria de passar uma noite?")
    print("Uma noite custa R$ 10 moeda")
    print(f"Suas moedas: {personagem['Moeda']}")
    opcao = int(input("1- Sim \n2- Sair \n3- Op√ß√£o: "))


    
    match opcao:
        case 1:
            if personagem['Moeda'] < 10:
                clear()
                print("Voc√™ n√£o tem moeda suficiente")
                print("Caia fora do meu motel!")
                time.sleep(1)
                vila()
            else:
                clear()
                personagem['Moeda'] -= 10 
                personagem['Atributos']['Vida'] = personagem['VidaInicial']
                personagem['Estamina'] = personagem['EstaminaInicial']
                print(f"voc√™ ainda tem R$: {personagem['Moeda']}")
                print(f"Sua saude esta recuperado: \nVida: {personagem['Atributos']['Vida']} \nEstamina: {personagem['Estamina']}")
                time.sleep(1)
                clear()
                opcaoVila()
        case 2:
            opcaoVila()
        case _:
            print("Op√ß√£o Inv√°lida!")
            time.sleep(1)
            motel()
  
# Sistema para comprar po√ß√µes
def mercador():
    global personagem
    clear()
    
    while True:
        print("Bem vindo ao meu mercado, viajante!")
        print("Oque gostaria de comprar?")
        print(f"Suas moedas: {personagem['Moeda']}")
        opcao = int(input("1- R$: 25 Po√ß√£o de cura \n2- R$: 50 Po√ß√£o de Dano \n3- R$: 75 Po√ß√£o de sorte \n4- Sair \nOp√ß√£o: "))
        
        match opcao:
            case 1:
                if personagem["Moeda"] >= 25:
                    personagem["Moeda"] -= 25
                    personagem["Mochila"]['Cura']['Quantidade'] += 1
                    print(f"Voc√™ esta agora com {personagem["Mochila"]['Cura']['Quantidade']}")
                    print(f"Moeda: {personagem["Moeda"]}")
                else:
                    print("Voc√™ n√£o tem moeda suficiente!")
                    time.sleep(1)
                    clear()   
            case 2:
                if personagem["Moeda"] >= 50:
                    personagem["Moeda"] -= 50
                    personagem["Mochila"]['Dano']['Quantidade'] += 1
                    print(f"Voc√™ esta agora com {personagem["Mochila"]['Dano']['Quantidade']}")
                    print(f"Moeda: {personagem["Moeda"]}")
                else:
                    print("Voc√™ n√£o tem moeda suficiente!")
                    time.sleep(1)
                    clear()   
            case 3:
                if personagem["Moeda"] >= 75:
                    personagem["Moeda"] -= 75
                    personagem["Mochila"]['Sorte']['Quantidade'] += 1
                    print(f"Voc√™ esta agora com {personagem["Mochila"]['Sorte']['Quantidade']}")
                    print(f"Moeda: {personagem["Moeda"]}")
                else:
                    print("Voc√™ n√£o tem moeda suficiente!")
                    time.sleep(1)
                    clear()  
            case 4:
                opcaoVila()
            case _:
                print("Op√ß√£o Inv√°lida!")
                time.sleep(1)
                clear()   

print(iniciarJogo())
